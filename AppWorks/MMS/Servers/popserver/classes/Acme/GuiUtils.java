package Acme;

import java.applet.Applet;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Window;
import java.awt.image.ImageObserver;
import java.awt.image.ImageProducer;
import java.awt.image.MemoryImageSource;

public class GuiUtils {
   private static final int SPLINE_THRESH = 3;
   private static final int DDA_SCALE = 8192;
   private static final int noticeWidth = 8;
   private static final int noticeHeight = 21;
   private static int[] noticePixels = new int[]{16777215, 16777215, -16777216, -16777216, -16777216, -16777216, 16777215, 16777215, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, -16777216, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, 16777215, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, -16777216, -16777216, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, -16777216, 16777215, -16777216, 16777215, 16777215, -16777216, -16777216, -16777216, 16777215, -16777216, 16777215, -16777216, -16777216, -16777216, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215};
   private static ImageProducer noticeSource = null;
   public static final Color noticeColor = new Color(255, 255, 144);
   private static final int warningWidth = 6;
   private static final int warningHeight = 19;
   private static int[] warningPixels = new int[]{16777215, 16777215, -16777216, -16777216, 16777215, 16777215, 16777215, -16777216, -16777216, 16777215, -16777216, 16777215, -16777216, -16777216, 16777215, -16777216, 16777215, -16777216, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, -16777216, 16777215, -16777216, 16777215, -16777216, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, -16777216, 16777215, -16777216, 16777215, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, -16777216, -16777216, 16777215, -16777216, 16777215, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, -16777216, -16777216, 16777215, -16777216, 16777215, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, -16777216, -16777216, -16777216, 16777215, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, -16777216, -16777216, 16777215, -16777216, 16777215, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215};
   private static ImageProducer warningSource = null;
   public static final Color warningColor = new Color(255, 160, 96);
   private static final int errorWidth = 17;
   private static final int errorHeight = 17;
   private static int[] errorPixels = new int[]{16777215, 16777215, 16777215, 16777215, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, -16777216, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, -16777216, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, 16777215, -16777216, -16777216, -16777216, 16777215, 16777215, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, 16777215, -16777216, -16777216, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, -16777216, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, -16777216, 16777215, -16777216, -16777216, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, -16777216, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, 16777215, -16777216, -16777216, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, 16777215, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215};
   private static ImageProducer errorSource = null;
   public static final Color errorColor = new Color(255, 112, 112);
   private static final int busyWidth = 19;
   private static final int busyHeight = 21;
   private static int[] busyPixels = new int[]{-16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, -16777216, -16777216, 16777215, 16777215, -16777216, -16777216, 16777215, 16777215, -16777216, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, -16777216, 16777215, 16777215, 16777215, -16777216, 16777215, 16777215, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, -16777216, -16777216, 16777215, 16777215, -16777216, -16777216, 16777215, 16777215, -16777216, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, -16777216, 16777215, 16777215, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, -16777216, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, -16777216, -16777216, 16777215, 16777215, -16777216, -16777216, 16777215, 16777215, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, 16777215, 16777215, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, -16777216, -16777216, 16777215, 16777215, -16777216, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, 16777215, 16777215, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, -16777216, 16777215, 16777215, -16777216, -16777216, 16777215, 16777215, 16777215, 16777215, -16777216, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, 16777215, 16777215, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, -16777216, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, -16777216, -16777216, 16777215, 16777215, -16777216, -16777216, 16777215, 16777215, -16777216, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, -16777216, 16777215, 16777215, 16777215, -16777216, 16777215, 16777215, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, -16777216, -16777216, 16777215, 16777215, -16777216, -16777216, 16777215, 16777215, -16777216, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, -16777216, 16777215, 16777215, 16777215, -16777216, 16777215, 16777215, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, -16777216, -16777216, 16777215, 16777215, -16777216, -16777216, 16777215, 16777215, -16777216, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, -16777216, 16777215, 16777215, 16777215, -16777216, 16777215, 16777215, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, -16777216, -16777216, 16777215, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215};
   private static ImageProducer busySource = null;
   public static final Color busyColor = new Color(176, 255, 255);
   private static final int qmarkWidth = 17;
   private static final int qmarkHeight = 27;
   private static int[] qmarkPixels = new int[]{16777215, 16777215, 16777215, 16777215, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, -16777216, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, -16777216, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, -16777216, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, -16777216, 16777215, -16777216, -16777216, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, -16777216, 16777215, -16777216, -16777216, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, -16777216, -16777216, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, -16777216, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215};
   private static ImageProducer qmarkSource = null;
   public static final Color qmarkColor = new Color(208, 255, 208);
   private static final int brokenWidth = 20;
   private static final int brokenHeight = 19;
   private static int[] brokenPixels = new int[]{-16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, -65281, -65281, -65281, -65281, -65281, -65281, -65281, -65281, -65281, -65281, -65281, -65281, -16777216, -16777216, 16777215, 16777215, 16777215, 16777215, 16777215, -16777216, -65281, -65281, -65281, -65281, -16777216, -16777216, -16777216, -16777216, -16777216, -65281, -65281, -65281, -16777216, -1, -16777216, 16777215, 16777215, 16777215, 16777215, -16777216, -65281, -65281, -65281, -16777216, -16711936, -16711936, -16711936, -16711936, -16777216, -16777216, -65281, -65281, -16777216, -1, -1, -16777216, 16777215, 16777215, 16777215, -16777216, -65281, -65281, -16777216, -16711936, -16711936, -16777216, -16777216, -16711936, -16711936, -16777216, -16777216, -65281, -16777216, -1, -1, -1, -16777216, 16777215, 16777215, -16777216, -65281, -65281, -16777216, -16711936, -16777216, -16777216, -65281, -16777216, -16711936, -16711936, -16777216, -65281, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, 16777215, -16777216, -65281, -65281, -65281, -16777216, -16777216, -65281, -65281, -16777216, -16711936, -16711936, -16777216, -65281, -65281, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -65281, -65281, -65281, -65281, -65281, -65281, -16777216, -16711936, -16711936, -16777216, -16777216, -65281, -65281, -65281, -65281, -65281, -65281, -16777216, -16777216, -16777216, -65281, -65281, -65281, -65281, -65281, -16777216, -16711936, -16711936, -16777216, -16777216, -65281, -65281, -65281, -65281, -65281, -65281, -65281, -16777216, -16777216, -16777216, -65281, -65281, -65281, -65281, -16777216, -16711936, -16711936, -16777216, -16777216, -65281, -65281, -65281, -65281, -65281, -65281, -65281, -65281, -16777216, -16777216, -16777216, -65281, -65281, -65281, -65281, -16777216, -16711936, -16777216, -16777216, -65281, -65281, -65281, -65281, -65281, -65281, -65281, -65281, -65281, -16777216, -16777216, -16777216, -65281, -65281, -65281, -65281, -65281, -16777216, -16777216, -16777216, -65281, -65281, -65281, -65281, -65281, -65281, -65281, -65281, -65281, -16777216, -16777216, -16777216, -65281, -65281, -65281, -65281, -65281, -16777216, -16777216, -16777216, -65281, -65281, -65281, -65281, -65281, -65281, -65281, -65281, -65281, -16777216, -16777216, -16777216, -65281, -65281, -65281, -65281, -16777216, -16711936, -16711936, -16777216, -16777216, -65281, -65281, -65281, -65281, -65281, -65281, -65281, -65281, -16777216, -16777216, -16777216, -65281, -65281, -65281, -65281, -16777216, -16711936, -16777216, -16777216, -16777216, -65281, -65281, -65281, -65281, -65281, -65281, -65281, -65281, -16777216, -16777216, -16777216, -65281, -65281, -65281, -65281, -65281, -16777216, -16777216, -16777216, -65281, -65281, -65281, -65281, -65281, -65281, -65281, -65281, -65281, -16777216, -16777216, -16777216, -65281, -65281, -65281, -65281, -65281, -65281, -65281, -65281, -65281, -65281, -65281, -65281, -65281, -65281, -65281, -65281, -65281, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216, -16777216};
   private static ImageProducer brokenSource = null;

   public static Image brokenIcon(Component var0) {
      if (brokenSource == null) {
         brokenSource = new MemoryImageSource(20, 19, brokenPixels, 0, 20);
      }

      return var0.createImage(brokenSource);
   }

   public static Image busyIcon(Component var0) {
      if (busySource == null) {
         busySource = new MemoryImageSource(19, 21, busyPixels, 0, 19);
      }

      return var0.createImage(busySource);
   }

   public static void drawImage(Graphics var0, Component var1, Image var2) {
      Dimension var3 = var1.size();
      var0.setColor(var1.getBackground());
      var0.fillRect(0, 0, var3.width, var3.height);
      var0.drawImage(var2, (var3.width - var2.getWidth((ImageObserver)null)) / 2, (var3.height - var2.getHeight((ImageObserver)null)) / 2, (ImageObserver)null);
   }

   public static void drawSpline(Graphics var0, int var1, int var2, int var3, int var4, int var5, int var6) {
      int var7 = (var1 + var3) / 2;
      int var8 = (var2 + var4) / 2;
      int var11 = (var3 + var5) / 2;
      int var12 = (var4 + var6) / 2;
      int var9 = (var7 + var11) / 2;
      int var10 = (var8 + var12) / 2;
      int var13 = (var1 + var9) / 2;
      int var14 = (var2 + var10) / 2;
      if (Math.abs(var7 - var13) + Math.abs(var8 - var14) > 3) {
         drawSpline(var0, var1, var2, var7, var8, var9, var10);
      } else {
         var0.drawLine(var1, var2, var9, var10);
      }

      var13 = (var5 + var9) / 2;
      var14 = (var6 + var10) / 2;
      if (Math.abs(var11 - var13) + Math.abs(var12 - var14) > 3) {
         drawSpline(var0, var9, var10, var11, var12, var5, var6);
      } else {
         var0.drawLine(var9, var10, var5, var6);
      }

   }

   public static void drawThickLine(Graphics var0, int var1, int var2, int var3, int var4, int var5) {
      var0.fillOval(var1 - var5 / 2, var2 - var5 / 2, var5, var5);
      if (var1 != var3 || var2 != var4) {
         int var6;
         int var7;
         byte var8;
         int var9;
         int var10;
         int var11;
         if (Math.abs(var3 - var1) > Math.abs(var4 - var2)) {
            if (var3 > var1) {
               var8 = 1;
            } else {
               var8 = -1;
            }

            var6 = (var4 - var2) * 8192 / Math.abs(var3 - var1);
            var10 = var2;
            var11 = var2;
            var7 = var2 * 8192 + 4096;
            var9 = var1;

            while(true) {
               if (var10 != var11) {
                  var0.drawOval(var9 - var5 / 2, var11 - var5 / 2, var5, var5);
                  var11 = var10;
               }

               var0.drawOval(var9 - var5 / 2, var10 - var5 / 2, var5, var5);
               if (var9 == var3) {
                  break;
               }

               var7 += var6;
               var10 = var7 / 8192;
               var9 += var8;
            }
         } else {
            if (var4 > var2) {
               var8 = 1;
            } else {
               var8 = -1;
            }

            var6 = (var3 - var1) * 8192 / Math.abs(var4 - var2);
            var10 = var2;
            var9 = var1;
            var11 = var1;
            var7 = var1 * 8192 + 4096;

            while(true) {
               if (var9 != var11) {
                  var0.drawOval(var11 - var5 / 2, var10 - var5 / 2, var5, var5);
                  var11 = var9;
               }

               var0.drawOval(var9 - var5 / 2, var10 - var5 / 2, var5, var5);
               if (var10 == var4) {
                  break;
               }

               var10 += var8;
               var7 += var6;
               var9 = var7 / 8192;
            }
         }

      }
   }

   public static Image errorIcon(Component var0) {
      if (errorSource == null) {
         errorSource = new MemoryImageSource(17, 17, errorPixels, 0, 17);
      }

      return var0.createImage(errorSource);
   }

   public static Component getTopParent(Component var0) {
      Container var1;
      while((var1 = ((Component)var0).getParent()) != null) {
         var0 = var1;
      }

      return (Component)var0;
   }

   public static void handleBgcolor(Applet var0) {
      String var1 = var0.getParameter("bgcolor");
      if (var1 != null) {
         Color var2 = parseColor(var1);
         if (var2 != null) {
            var0.setBackground(var2);
         }
      }

   }

   public static Image noticeIcon(Component var0) {
      if (noticeSource == null) {
         noticeSource = new MemoryImageSource(8, 21, noticePixels, 0, 8);
      }

      return var0.createImage(noticeSource);
   }

   public static void packWindow(Component var0) {
      while(var0 != null) {
         if (var0 instanceof Window) {
            ((Window)var0).pack();
            return;
         }

         var0 = ((Component)var0).getParent();
      }

   }

   public static Color parseColor(String var0) {
      if (var0.startsWith("#")) {
         try {
            int var3 = Integer.parseInt(var0.substring(1), 16);
            return new Color(var3 >>> 16 & 255, var3 >>> 8 & 255, var3 & 255);
         } catch (NumberFormatException var2) {
            return null;
         }
      } else {
         Color var1 = parseNamedColor(var0);
         if (var1 != null) {
            return var1;
         } else {
            if (var0.substring(0, 4).equalsIgnoreCase("dark")) {
               var1 = parseNamedColor(var0.substring(4));
               if (var1 != null) {
                  return var1.darker();
               }
            }

            if (var0.substring(0, 5).equalsIgnoreCase("light")) {
               var1 = parseNamedColor(var0.substring(5));
               if (var1 != null) {
                  return var1.brighter();
               }
            }

            if (var0.substring(0, 6).equalsIgnoreCase("bright")) {
               var1 = parseNamedColor(var0.substring(6));
               if (var1 != null) {
                  return var1.brighter();
               }
            }

            return null;
         }
      }
   }

   private static Color parseNamedColor(String var0) {
      if (var0.equalsIgnoreCase("black")) {
         return Color.black;
      } else if (var0.equalsIgnoreCase("blue")) {
         return Color.blue;
      } else if (var0.equalsIgnoreCase("cyan")) {
         return Color.cyan;
      } else if (var0.equalsIgnoreCase("darkGray")) {
         return Color.darkGray;
      } else if (var0.equalsIgnoreCase("gray")) {
         return Color.gray;
      } else if (var0.equalsIgnoreCase("green")) {
         return Color.green;
      } else if (var0.equalsIgnoreCase("lightGray")) {
         return Color.lightGray;
      } else if (var0.equalsIgnoreCase("magenta")) {
         return Color.magenta;
      } else if (var0.equalsIgnoreCase("orange")) {
         return Color.orange;
      } else if (var0.equalsIgnoreCase("pink")) {
         return Color.pink;
      } else if (var0.equalsIgnoreCase("red")) {
         return Color.red;
      } else if (var0.equalsIgnoreCase("white")) {
         return Color.white;
      } else {
         return var0.equalsIgnoreCase("yellow") ? Color.yellow : null;
      }
   }

   public static Image qmarkIcon(Component var0) {
      if (qmarkSource == null) {
         qmarkSource = new MemoryImageSource(17, 27, qmarkPixels, 0, 17);
      }

      return var0.createImage(qmarkSource);
   }

   public static Image warningIcon(Component var0) {
      if (warningSource == null) {
         warningSource = new MemoryImageSource(6, 19, warningPixels, 0, 6);
      }

      return var0.createImage(warningSource);
   }
}
